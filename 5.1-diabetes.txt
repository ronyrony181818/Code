# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M3aR18dEyzeyGjzX0UcHd-ZL6yxEe91N
"""

import pandas as pd
import seaborn as sns

df=pd.read_csv("diabetes.csv")
df

df.head()

#input
x=df.drop("Outcome", axis=1)
#output
y=df["Outcome"]

y.value_counts()

#feature scaling
from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
x_scaled=scaler.fit_transform(x)

#cross validation
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x_scaled,y, random_state=0, test_size=0.25)

x.shape

x_scaled.shape

x_test.shape

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train,y_train)

from sklearn.metrics import ConfusionMatrixDisplay, accuracy_score
from sklearn.metrics import classification_report

y_pred=knn.predict(x_test)

ConfusionMatrixDisplay.from_predictions(y_test,y_pred)

print(classification_report(y_test,y_pred))

import matplotlib.pyplot as plt
import numpy as np

errors=[]
for k in range (1,41):
  knn=KNeighborsClassifier(n_neighbors=k)
  knn.fit(x_train,y_train)
  y_pred=knn.predict(x_test)
  errors.append(np.mean(y_pred!=y_test))

errors

plt.plot(range(1,41), errors, marker="o")

#33 gives the lowest value

knn=KNeighborsClassifier(n_neighbors=33)
knn.fit(x_train,y_train)
y_pred=knn.predict(x_test)

ConfusionMatrixDisplay.from_predictions(y_test,y_pred)

print(classification_report(y_test,y_pred))

