#include<iostream>
#include<bits/stdc++.h>
using namespace std;

int non_recursive (int n) {
    if (n<=1) {
        cout<<"--> "<<0;
        return 0;
    } else {
        int a = 0, b = 1, c, i = 2;
        cout<<"--> "<<a<<" "<<b<<" ";
        if (n == 2)
            return 1;

        while(i < n) {
            c = a + b;
            cout<<c<<" ";

            a = b;
            b = c;
            i++;
        }
        return c;
    }
}

int recursive (int n) {
    if (n <= 1) {
        return n;
    }

    return (recursive(n-1) + recursive(n-2));
}

int main() {
    int n = 10;

    int result_1 = non_recursive(n);
    cout<<endl;
    cout<<n<<"th number using iteration: "<<result_1<<endl;
    
    int result_2 = recursive(n-1);
    cout<<endl;
    cout<<n<<"th number using recursion: "<<result_2<<endl;

    return 0;
}
----------------------------------------------------------------------------


#include<iostream>
#include<bits/stdc++.h>
#include<vector>
#include<algorithm>
using namespace std;

class Item {

    public:
        int weight;
        int value;

        Item(int w, int v) {
            weight = w;
            value = v;
        }
};

bool compareItems(Item a, Item b) {
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2;
}

double fractionalKnapsack (int capacity, vector <Item> &items) {
    sort(items.begin(), items.end(), compareItems);

    double totalValue = 0.0;

    for (auto item : items) {
        if (item.weight <= capacity) {
            capacity -= item.weight;
            totalValue += item.value;
        } else {
            totalValue += (double)capacity * ((double)item.value / item.weight);
            break;
        }
    }
    return totalValue;
}

int main() {
    int capacity = 50;
    vector<Item> items = { 
        {10, 60}, 
        {20, 100}, 
        {30, 120} 
    };
    
    cout << "Maximum value in knapsack = " << fractionalKnapsack(capacity, items) << endl;

    return 0;
}

---------------------------------------------------------------------


#include<iostream>
#include<bits/stdc++.h>
#include<vector>
#include<algorithm>
using namespace std;

class Item {

    public:
        int weight;
        int value;

        Item(int w, int v) {
            weight = w;
            value = v;
        }
};

int zeroOneKnapsack(int capacity, vector<Item>& items) {
    int n = items.size();
    vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));

    for (int i = 1; i <= n; i++) {
        for (int w = 0; w <= capacity; w++) {
            if (items[i - 1].weight <= w) {
                // Choose max between including the item or excluding it
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - items[i - 1].weight] + items[i - 1].value);
            } else {
                // If item can't be included, carry forward the previous value
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    return dp[n][capacity]; 
}

int main() {
    int capacity = 50; 
    vector<Item> items = { {10, 60}, {20, 100}, {30, 120} };
    
    cout << "Maximum value in knapsackkk = " << zeroOneKnapsack(capacity, items) << endl;

    return 0;
}

---------------------------------------------------------------------------


#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

class NQueensProblem {
private:
    vector<int> queens;
    int numSolutions;

public:

    NQueensProblem(int n) {
    queens.resize(n);   
    numSolutions = 0;   
    }

    void solve() {
        solve(0);
    }

private:
    void solve(int row) {
        if (row == queens.size()) {
            numSolutions++;
            printSolution();
        } else {
            for (int col = 0; col < queens.size(); col++) {
                queens[row] = col;
                if (isValid(row, col)) {
                    solve(row + 1);
                }
            }
        }
    }

    bool isValid(int row, int col) {
        for (int i = 0; i < row; i++) {
            int diff =  abs(queens[i] - col);
            if (diff == 0 || diff == row - i) {
                return false;
            }
        }
        return true;
    }

    void printSolution() {
        if (numSolutions == 1) {
             cout << "Solution: ";
            for (int i = 0; i < queens.size(); i++) {
                 cout << queens[i] << " ";
            }
             cout <<  endl;
             cout << "The Matrix Representation:" <<  endl;
             vector< vector<int> > arr(queens.size(),  vector<int>(queens.size(), 0));
            for (int i = 0; i < queens.size(); i++) {
                arr[i][queens[i]] = 1;
            }
            for (int i = 0; i < queens.size(); i++) {
                for (int j = 0; j < queens.size(); j++) {
                     cout << arr[i][j] << " ";
                }
                 cout <<  endl;
            }
        }
    }
};

int main() {
    cout << "Enter N Queens Problem: ";
    int n = 4;

    NQueensProblem nQueensProblem(n);
    nQueensProblem.solve();

    return 0;
}

-----------------------------------------------------------------------
