#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

class Item {
    public:
        int weight;
        int value;

        Item(int w, int v) {
            weight = w;
            value = v;
        }
};

int Knapsack(int capacity, vector<Item> &items) 
{
    int n=items.size();
    vector<vector<int>> dp(n+1,vector<int>(capacity+1,0));
    
    for(int i=1;i<=n;i++){
    for(int w=0;w<=capacity;w++)
    {
        if(items[i-1].weight<=w)
        {
            dp[i][w]=max(dp[i-1][w],dp[i-1][w-items[i-1].weight]+items[i-1].value);
        }
        else
        {
            dp[i][w]=dp[i-1][w];
        }
    }
}
return dp[n][capacity];
}
int main() {
    int capacity;
    cout << "Enter the capacity of the knapsack: ";
    cin >> capacity;

    int n;
    cout << "Enter the number of items: ";
    cin >> n;

    vector<Item> items;
    for (int i = 0; i < n; i++) {
        int weight, value;
        cout << "Enter weight and value for item " << i + 1 << ": ";
        cin >> weight >> value;
        items.push_back(Item(weight, value));
    }
    
    cout << "Maximum value in knapsack = " << Knapsack(capacity, items) << endl;

    return 0;
}
