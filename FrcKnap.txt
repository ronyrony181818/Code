#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

class Item {
    public:
        int weight;
        int value;

        Item(int w, int v) {
            weight = w;
            value = v;
        }
};

bool compareItems(Item a, Item b) {
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2;
}

double fractionalKnapsack(int capacity, vector<Item> &items) {
    sort(items.begin(), items.end(), compareItems);
    double totalValue = 0.0;

    for (auto item : items) {
        if (item.weight <= capacity) {
            capacity -= item.weight;
            totalValue += item.value;
        } else {
            totalValue += (double)capacity * ((double)item.value / item.weight);
            break;
        }
    }
    return totalValue;
}

int main() {
    int capacity;
    cout << "Enter the capacity of the knapsack: ";
    cin >> capacity;

    int n;
    cout << "Enter the number of items: ";
    cin >> n;

    vector<Item> items;
    for (int i = 0; i < n; i++) {
        int weight, value;
        cout << "Enter weight and value for item " << i + 1 << ": ";
        cin >> weight >> value;
        items.push_back(Item(weight, value));
    }
    
    cout << "Maximum value in knapsack = " << fractionalKnapsack(capacity, items) << endl;

    return 0;
}
